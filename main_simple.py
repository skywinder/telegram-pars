"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è Telegram Parser - —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏ —ç–∫—Å–ø–æ—Ä—Ç
–ó–∞–ø—É—Å–∫: python main_simple.py
"""
import asyncio
import sys
from telegram_parser import TelegramParser
from data_exporter import DataExporter
import config

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("üöÄ TELEGRAM CHAT PARSER - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not config.API_ID or not config.API_HASH:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏!")
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ https://my.telegram.org")
        print("2. –°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ API_ID –∏ API_HASH")
        print("3. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env –ø–æ –ø—Ä–∏–º–µ—Ä—É .env.example")
        print("4. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ")
        return

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
    parser = TelegramParser()
    exporter = DataExporter()

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        await parser.initialize()

        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        while True:
            print("\n" + "="*40)
            print("üìã –ú–ï–ù–Æ –î–ï–ô–°–¢–í–ò–ô:")
            print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
            print("2. üí¨ –°–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç")
            print("3. üöÄ –°–ø–∞—Ä—Å–∏—Ç—å –í–°–ï —á–∞—Ç—ã")
            print("4. ‚ùå –í—ã—Ö–æ–¥")
            print("="*40)

            choice = input("\nüëâ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()

            if choice == "1":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                await show_chats_list(parser)

            elif choice == "2":
                # –ü–∞—Ä—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                await parse_single_chat(parser, exporter)

            elif choice == "3":
                # –ü–∞—Ä—Å–∏–º –≤—Å–µ —á–∞—Ç—ã
                await parse_all_chats(parser, exporter)

            elif choice == "4":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await parser.close()

async def show_chats_list(parser: TelegramParser):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
    """
    chats = await parser.get_chats_list()

    print(f"\nüìã –°–ü–ò–°–û–ö –ß–ê–¢–û–í ({len(chats)} —à—Ç—É–∫):")
    print("-" * 60)

    for i, chat in enumerate(chats[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        print(f"{i:2}. üí¨ {chat['name'][:30]:30} | {chat['type']:15} | ID: {chat['id']}")

    if len(chats) > 20:
        print(f"... –∏ –µ—â–µ {len(chats) - 20} —á–∞—Ç–æ–≤")

    input("\nüì± –ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")

async def parse_single_chat(parser: TelegramParser, exporter: DataExporter):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    """
    print("\nüéØ –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ì–û –ß–ê–¢–ê")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    chats = await parser.get_chats_list()

    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
    for i, chat in enumerate(chats[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"{i}. {chat['name']} (ID: {chat['id']})")

    try:
        choice = int(input(f"\nüëâ –í—ã–±–µ—Ä–∏ —á–∞—Ç (1-{min(10, len(chats))}): "))
        if 1 <= choice <= min(10, len(chats)):
            selected_chat = chats[choice - 1]

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            limit = input(f"üìä –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∞—Ä—Å–∏—Ç—å? (Enter = {config.MAX_MESSAGES}): ").strip()
            if limit:
                limit = int(limit)
            else:
                limit = config.MAX_MESSAGES

            print(f"\nüöÄ –ü–∞—Ä—Å–∏–º —á–∞—Ç '{selected_chat['name']}'...")

            # –ü–∞—Ä—Å–∏–º —á–∞—Ç
            messages = await parser.parse_chat_messages(selected_chat['id'], limit)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'timestamp': f"{__import__('datetime').datetime.now().isoformat()}",
                'total_chats': 1,
                'chats': {
                    str(selected_chat['id']): {
                        'info': selected_chat,
                        'messages': messages,
                        'total_messages': len(messages)
                    }
                }
            }

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            exported_files = exporter.export_all_formats(export_data)

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞")

    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def parse_all_chats(parser: TelegramParser, exporter: DataExporter):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    """
    print("\nüöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –í–°–ï–• –ß–ê–¢–û–í")
    print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")

    confirm = input("ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ —á–∞—Ç—ã
        all_data = await parser.parse_all_chats()

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        exported_files = exporter.export_all_formats(all_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

def check_python_version():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    """
    if sys.version_info < (3, 7):
        print("‚ùå –ù—É–∂–µ–Ω Python 3.7 –∏–ª–∏ –Ω–æ–≤–µ–µ!")
        print(f"–¢–≤–æ—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        sys.exit(1)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    check_python_version()

    print("üêç Python –≤–µ—Ä—Å–∏—è OK")
    print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    asyncio.run(main())