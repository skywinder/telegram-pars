"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""
import asyncio
import argparse
import sys
import signal
import os
from datetime import datetime
from telegram_parser import TelegramParser
from data_exporter import DataExporter
from status_manager import set_active_parser, clear_active_parser, StatusManager
import config

async def run_parser(args):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    parser = TelegramParser()
    exporter = DataExporter()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await parser.initialize()
        set_active_parser(parser)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        session_id = parser.db.create_scan_session() if parser.db else None
        
        if args.all:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
            print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
            dialogs = await parser.get_dialogs()
            
            for dialog in dialogs:
                if StatusManager.is_interruption_requested():
                    print("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                await parser.parse_chat(
                    dialog,
                    limit=args.limit,
                    force_full_scan=args.force_full_scan
                )
                
        elif args.check_changes:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...")
            hours = args.hours or 24
            await parser.check_for_changes(hours_threshold=hours)
            
        elif args.chats:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
            print(f"üìã –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {args.chats}")
            for chat_id in args.chats:
                if StatusManager.is_interruption_requested():
                    print("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                try:
                    chat_id = int(chat_id)
                    dialogs = await parser.get_dialogs()
                    dialog = next((d for d in dialogs if d.id == chat_id), None)
                    
                    if dialog:
                        await parser.parse_chat(
                            dialog,
                            limit=args.limit,
                            force_full_scan=args.force_full_scan
                        )
                    else:
                        print(f"‚ùå –ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except ValueError:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}")
                    
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        if parser.db and session_id:
            parser.db.close_scan_session(session_id)
            
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        StatusManager.update_status({
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })
    finally:
        clear_active_parser()
        await parser.disconnect()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Telegram Parser Runner')
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    parser.add_argument('--auto', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é)')
    parser.add_argument('--all', action='store_true', help='–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã')
    parser.add_argument('--check-changes', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    parser.add_argument('--chats', nargs='+', help='ID —á–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
    
    # –û–ø—Ü–∏–∏
    parser.add_argument('--limit', type=int, help='–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
    parser.add_argument('--force-full-scan', action='store_true', help='–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)')
    parser.add_argument('--hours', type=int, default=24, help='–ß–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not config.API_ID or not config.API_HASH:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å API_ID –∏ API_HASH")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    try:
        asyncio.run(run_parser(args))
    except KeyboardInterrupt:
        print("\n‚úã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        StatusManager.request_interruption()
        sys.exit(0)

if __name__ == "__main__":
    main()