#!/usr/bin/env python3
"""
Real-time Status Monitor for Telegram Parser
Monitors parsing progress and allows graceful interruption
"""
import asyncio
import json
import os
import signal
import sys
import time
from datetime import datetime
from typing import Optional
import requests


class StatusMonitor:
    """Real-time status monitor for Telegram Parser operations"""

    def __init__(self, api_base_url: str = "http://localhost:5001"):
        self.api_base_url = api_base_url
        self.running = True
        self.last_status = None

    def setup_signal_handlers(self):
        """Setup signal handlers for graceful interruption"""
        def signal_handler(signum, frame):
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...")
            self.request_interruption()
            self.running = False

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    def get_status(self) -> Optional[dict]:
        """Get current parsing status from API"""
        try:
            response = requests.get(f"{self.api_base_url}/api/status", timeout=5)
            if response.status_code == 200:
                return response.json()
            else:
                return {'status': 'api_error', 'message': f'HTTP {response.status_code}'}
        except requests.exceptions.RequestException as e:
            return {'status': 'connection_error', 'message': str(e)}

    def request_interruption(self) -> bool:
        """Request graceful interruption of parsing operation"""
        try:
            response = requests.post(f"{self.api_base_url}/api/status/interrupt", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: HTTP {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {e}")
            return False

    def format_time(self, seconds: float) -> str:
        """Format time in human-readable format"""
        if seconds < 60:
            return f"{seconds:.0f}—Å"
        elif seconds < 3600:
            return f"{seconds/60:.1f}–º"
        else:
            return f"{seconds/3600:.1f}—á"

    def display_status(self, status_data: dict):
        """Display current status in a nice format"""
        # Clear screen for better display
        os.system('clear' if os.name == 'posix' else 'cls')

        print("üîç TELEGRAM PARSER - –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–¢–£–°–ê")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        if status_data['status'] == 'no_active_parser':
            print("üò¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞")
            return

        if status_data['status'] == 'connection_error':
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {status_data['message']}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5001")
            return

        if status_data['status'] != 'success':
            print(f"‚ùå –û—à–∏–±–∫–∞: {status_data.get('message', 'Unknown error')}")
            return

        data = status_data['data']

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {data.get('current_operation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üì± –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if data.get('is_active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")

        if data.get('interruption_requested'):
            print("üõë –ó–ê–ü–†–û–®–ï–ù–û –ü–†–ï–†–´–í–ê–ù–ò–ï - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        current_chat = data.get('current_chat')
        if current_chat:
            print(f"üí¨ –¢–µ–∫—É—â–∏–π —á–∞—Ç: {current_chat.get('name', 'Unknown')}")
            print(f"üè∑Ô∏è  –¢–∏–ø —á–∞—Ç–∞: {current_chat.get('type', 'Unknown')}")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress = data.get('progress', {})
        if progress.get('total_chats', 0) > 0:
            processed = progress.get('processed_chats', 0)
            total = progress.get('total_chats', 0)
            percentage = (processed / total) * 100 if total > 0 else 0

            print(f"\nüìä –ü–†–û–ì–†–ï–°–°:")
            print(f"‚îú‚îÄ –ß–∞—Ç—ã: {processed}/{total} ({percentage:.1f}%)")

            # Progress bar
            bar_length = 40
            filled_length = int(bar_length * processed // total) if total > 0 else 0
            bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
            print(f"‚îú‚îÄ [{bar}]")

            # Estimated time remaining
            eta = progress.get('estimated_time_remaining')
            if eta and eta > 0:
                print(f"‚îú‚îÄ –û—Å—Ç–∞–ª–æ—Å—å: ~{self.format_time(eta)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        session_stats = data.get('session_statistics', {})
        if session_stats:
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò:")
            print(f"‚îú‚îÄ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {session_stats.get('total_requests', 0)}")
            print(f"‚îú‚îÄ FloodWait –æ—à–∏–±–æ–∫: {session_stats.get('flood_waits', 0)}")
            print(f"‚îú‚îÄ –î—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫: {session_stats.get('errors', 0)}")

            duration = session_stats.get('duration_seconds', 0)
            if duration > 0:
                print(f"‚îú‚îÄ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.format_time(duration)}")

            rpm = session_stats.get('requests_per_minute', 0)
            if rpm > 0:
                print(f"‚îú‚îÄ –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: {rpm:.1f}")

            flood_rate = session_stats.get('flood_wait_rate', 0)
            if flood_rate > 0:
                print(f"‚îî‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç FloodWait: {flood_rate:.1f}%")

        print(f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('last_update', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∏–∑—è—â–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")

    def run(self, refresh_interval: float = 2.0):
        """Run the status monitor"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram Parser...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∏–∑—è—â–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")

        self.setup_signal_handlers()

        while self.running:
            try:
                status = self.get_status()
                if status:
                    self.display_status(status)
                    self.last_status = status

                # Wait for next refresh
                time.sleep(refresh_interval)

            except KeyboardInterrupt:
                print(f"\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                self.request_interruption()
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(refresh_interval)

        print("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


def main():
    """Main function"""
    import argparse

    parser = argparse.ArgumentParser(description='Telegram Parser Status Monitor')
    parser.add_argument('--url', default='http://localhost:5001',
                       help='Base URL for Telegram Parser API (default: http://localhost:5001)')
    parser.add_argument('--interval', type=float, default=2.0,
                       help='Refresh interval in seconds (default: 2.0)')

    args = parser.parse_args()

    monitor = StatusMonitor(api_base_url=args.url)
    monitor.run(refresh_interval=args.interval)


if __name__ == '__main__':
    main()