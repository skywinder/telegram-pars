"""
Telegram Parser - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
"""
import asyncio
import json
import os
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from telethon import TelegramClient
from telethon.tl.types import Message, User, Chat, Channel
from telethon.errors import FloodWaitError, AuthKeyUnregisteredError, UserRestrictedError
from telethon.tl.functions.account import GetAuthorizationsRequest
from database import TelegramDatabase
import config
from realtime_monitor import RealtimeMonitor, set_monitor_instance

class TelegramParser:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ Telegram
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.client = None
        self.session_name = 'telegram_parser_session'
        self.db = None
        self.monitor = None  # –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if config.ENABLE_HISTORY_TRACKING:
            db_path = os.path.join(config.OUTPUT_DIR, config.DB_FILENAME)
            self.db = TelegramDatabase(db_path)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        self.rate_limits = config.RATE_LIMITING
        self.last_request_time = 0
        self.flood_wait_count = 0
        self.account_restricted = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.session_stats = {
            'total_requests': 0,
            'flood_waits': 0,
            'errors': 0,
            'start_time': None
        }

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.current_status = {
            'is_active': False,
            'current_operation': None,
            'current_chat': None,
            'progress': {
                'total_chats': 0,
                'processed_chats': 0,
                'current_chat_progress': 0,
                'estimated_time_remaining': None
            },
            'last_update': None,
            'interruption_requested': False
        }

    async def initialize(self):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        """
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        self.session_stats['start_time'] = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        self.client = TelegramClient(
            self.session_name,
            config.API_ID,
            config.API_HASH
        )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await self.client.start(phone=config.PHONE_NUMBER)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.rate_limits.get('check_account_restrictions', True):
            await self._check_account_restrictions()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        await self._init_realtime_monitor()

    async def _check_account_restrictions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            if not me:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                self.account_restricted = True
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            try:
                await self._safe_request(self.client(GetAuthorizationsRequest()))
                print("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                self.account_restricted = True

        except (AuthKeyUnregisteredError, UserRestrictedError) as e:
            print(f"üö´ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: {e}")
            self.account_restricted = True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    
    async def _init_realtime_monitor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if not self.db:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if hasattr(config, 'ENABLE_REALTIME_MONITOR') and config.ENABLE_REALTIME_MONITOR:
                print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
                self.monitor = RealtimeMonitor(self.client, self.db)
                set_monitor_instance(self.monitor)
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")

    async def _safe_request(self, request, max_retries: int = 3):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        for attempt in range(max_retries):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                current_time = time.time()
                time_since_last = current_time - self.last_request_time
                delay_needed = self.rate_limits.get('delay_between_requests', 0.5)

                if time_since_last < delay_needed:
                    sleep_time = delay_needed - time_since_last
                    await asyncio.sleep(sleep_time)

                self.last_request_time = time.time()
                self.session_stats['total_requests'] += 1

                result = await request

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ flood wait –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                self.flood_wait_count = 0
                return result

            except FloodWaitError as e:
                self.session_stats['flood_waits'] += 1
                self.flood_wait_count += 1

                wait_time = e.seconds
                max_wait = self.rate_limits.get('max_flood_wait', 300)

                if wait_time > max_wait:
                    print(f"üö´ –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ ({wait_time}s), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å")
                    raise

                backoff = self.rate_limits.get('backoff_multiplier', 1.5) ** (attempt + 1)
                actual_wait = min(wait_time * backoff, max_wait)

                print(f"‚è≥ FloodWait: –∂–¥–µ–º {actual_wait:.1f}s (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                await asyncio.sleep(actual_wait)

                if attempt == max_retries - 1:
                    print(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
                    raise

            except Exception as e:
                self.session_stats['errors'] += 1
                if attempt == max_retries - 1:
                    raise

                wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                await asyncio.sleep(wait_time)

    def _should_skip_chat(self, chat_info: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        if self.account_restricted:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.db:
            cached_count = self.db.get_cached_message_count(chat_info['id'])
            if cached_count > 0:
                print(f"üì¶ –ß–∞—Ç '{chat_info['name']}' —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {cached_count} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return True

        return False

    def get_session_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        current_time = datetime.now()
        duration = (current_time - self.session_stats['start_time']).total_seconds() if self.session_stats['start_time'] else 0

        return {
            **self.session_stats,
            'duration_seconds': duration,
            'requests_per_minute': (self.session_stats['total_requests'] / duration * 60) if duration > 0 else 0,
            'flood_wait_rate': (self.session_stats['flood_waits'] / self.session_stats['total_requests'] * 100) if self.session_stats['total_requests'] > 0 else 0,
            'account_restricted': self.account_restricted
        }

    def update_status(self, operation: str = None, chat_info: Dict = None, progress_update: Dict = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.current_status['last_update'] = datetime.now().isoformat()

        if operation:
            self.current_status['current_operation'] = operation
            self.current_status['is_active'] = operation != 'idle'

        if chat_info:
            self.current_status['current_chat'] = chat_info

        if progress_update:
            self.current_status['progress'].update(progress_update)

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            if (self.current_status['progress']['processed_chats'] > 0 and
                self.session_stats['start_time']):
                elapsed = (datetime.now() - self.session_stats['start_time']).total_seconds()
                avg_time_per_chat = elapsed / self.current_status['progress']['processed_chats']
                remaining_chats = (self.current_status['progress']['total_chats'] -
                                 self.current_status['progress']['processed_chats'])
                self.current_status['progress']['estimated_time_remaining'] = avg_time_per_chat * remaining_chats

    def get_current_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        return {
            **self.current_status,
            'session_statistics': self.get_session_statistics()
        }

    def request_interruption(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑—è—â–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.current_status['interruption_requested'] = True
        print("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞...")

    def check_interruption_requested(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        return self.current_status['interruption_requested']

    async def get_chats_list(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
        """
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        chats = []

        try:
            async for dialog in self.client.iter_dialogs():
                chat_info = {
                    'id': dialog.id,
                    'name': dialog.name,
                    'type': type(dialog.entity).__name__,
                    'unread_count': dialog.unread_count
                }
                chats.append(chat_info)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –ë–î
                if self.db:
                    self.db.save_chat(chat_info)

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
                await asyncio.sleep(0.1)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            self.session_stats['errors'] += 1

        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
        return chats

    async def parse_chat_messages(self, chat_id: int, limit: int = None, session_id: str = None, force_full_scan: bool = False) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Args:
            chat_id: ID —á–∞—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (None = –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            session_id: ID —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            force_full_scan: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        if self.account_restricted:
            print(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {chat_id} - –∞–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            return []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not force_full_scan and self.db:
            cached_count = self.db.get_cached_message_count(chat_id)
            last_message_date = self.db.get_last_message_date(chat_id)

            if cached_count > 0:
                print(f"üì¶ –ß–∞—Ç {chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {cached_count} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message_date}")

                # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
                if last_message_date:
                    try:
                        last_date = datetime.fromisoformat(last_message_date.replace('Z', '+00:00'))
                        return await self._parse_new_messages_since(chat_id, last_date, session_id)
                    except ValueError:
                        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

        # –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        return await self._parse_all_messages(chat_id, limit, session_id)

    async def _parse_new_messages_since(self, chat_id: int, since_date: datetime, session_id: str = None) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        print(f"üîÑ –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {since_date.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.update_status(
            operation='parsing_new_messages',
            progress_update={
                'current_chat_messages': 0,
                'current_chat_messages_processed': 0,
                'parsing_phase': '–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
            }
        )

        messages = []
        current_message_ids = []
        new_count = 0
        total_checked = 0

        try:
            async for message in self.client.iter_messages(chat_id, offset_date=since_date):
                if isinstance(message, Message):
                    total_checked += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if total_checked % 10 == 0:
                        self.update_status(
                            progress_update={
                                'current_chat_messages_processed': total_checked,
                                'new_messages_found': new_count,
                                'parsing_phase': f'–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_checked} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö'
                            }
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(self.rate_limits.get('delay_between_requests', 0.5))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    if message.sender and self.db:
                        await self._save_user_info(message.sender)

                    message_data = {
                        'id': message.id,
                        'date': message.date.isoformat() if message.date else None,
                        'text': message.text or '',
                        'sender_id': message.sender_id,
                        'chat_id': chat_id,
                        'reply_to': message.reply_to_msg_id if message.reply_to else None,
                        'media_type': type(message.media).__name__ if message.media else None,
                        'views': getattr(message, 'views', 0),
                        'forwards': getattr(message, 'forwards', 0)
                    }

                    messages.append(message_data)
                    current_message_ids.append(message.id)
                    new_count += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    if self.db and session_id:
                        self.db.save_message_with_history(message_data, session_id)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            self.session_stats['errors'] += 1

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {total_checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.update_status(
            progress_update={
                'parsing_phase': f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {new_count} –Ω–æ–≤—ã—Ö –∏–∑ {total_checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö',
                'messages_saved': self.session_stats.get('messages_saved', 0) + new_count
            }
        )
        
        return messages

    async def _parse_all_messages(self, chat_id: int, limit: int = None, session_id: str = None) -> List[Dict]:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        if limit is None:
            limit = config.MAX_MESSAGES

        print(f"üí¨ –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {chat_id} (–ª–∏–º–∏—Ç: {limit or '–≤—Å–µ'})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_status(
            operation='parsing_full_chat',
            progress_update={
                'current_chat_messages': limit or 'all',
                'current_chat_messages_processed': 0,
                'parsing_phase': '–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            }
        )

        messages = []
        current_message_ids = []

        try:
            message_count = 0
            async for message in self.client.iter_messages(chat_id, limit=limit):
                if isinstance(message, Message):
                    message_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_count % 10 == 0:
                        self.update_status(
                            progress_update={
                                'current_chat_messages_processed': message_count,
                                'parsing_phase': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π'
                            }
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(self.rate_limits.get('delay_between_requests', 0.5))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    if message.sender and self.db:
                        await self._save_user_info(message.sender)

                    message_data = {
                        'id': message.id,
                        'date': message.date.isoformat() if message.date else None,
                        'text': message.text or '',
                        'sender_id': message.sender_id,
                        'chat_id': chat_id,
                        'reply_to': message.reply_to_msg_id if message.reply_to else None,
                        'media_type': type(message.media).__name__ if message.media else None,
                        'views': getattr(message, 'views', 0),
                        'forwards': getattr(message, 'forwards', 0)
                    }

                    messages.append(message_data)
                    current_message_ids.append(message.id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    if self.db and session_id:
                        self.db.save_message_with_history(message_data, session_id)
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                    self.session_stats['messages_saved'] = self.session_stats.get('messages_saved', 0) + 1

            # –ü–æ–º–µ—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.db and session_id:
                deleted_count = self.db.mark_deleted_messages(chat_id, current_message_ids, session_id)
                if deleted_count > 0:
                    print(f"üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {deleted_count} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.session_stats['errors'] += 1

        print(f"‚úÖ –°–ø–∞—Ä—Å–∏–ª–∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return messages

    async def check_for_changes(self, chat_id: int = None, hours_threshold: int = 24) -> Dict[str, Any]:
        """
        –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)

        Args:
            chat_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (None = –≤—Å–µ —á–∞—Ç—ã)
            hours_threshold: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_threshold} —á–∞—Å–æ–≤...")

        if self.account_restricted:
            print("üö´ –ê–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return {'error': 'Account restricted'}

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        session_id = None
        if self.db:
            session_id = self.db.create_scan_session()

        changes_found = {
            'total_changes': 0,
            'edited_messages': 0,
            'deleted_messages': 0,
            'chats_checked': 0,
            'session_id': session_id
        }

        try:
            if chat_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                chats_to_check = [{'id': chat_id, 'name': f'Chat {chat_id}'}]
            else:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
                chats_to_check = await self.get_chats_list()

            for chat in chats_to_check:
                chat_id = chat['id']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ—Ç —á–∞—Ç
                if self.db and not self.db.should_check_for_changes(chat_id, hours_threshold):
                    print(f"‚è≠Ô∏è –ß–∞—Ç '{chat['name']}' –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ '{chat['name']}'...")

                try:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º —á–∞—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    await self.parse_chat_messages(chat_id, session_id=session_id, force_full_scan=True)
                    changes_found['chats_checked'] += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
                    delay = self.rate_limits.get('delay_between_chats', 2)
                    await asyncio.sleep(delay)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ '{chat['name']}': {e}")
                    self.session_stats['errors'] += 1
                    continue

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if self.db and session_id:
                changes_summary = self.db.get_changes_summary(hours_threshold // 24 or 1)
                changes_found.update(changes_summary)

                stats = {
                    'total_chats': changes_found['chats_checked'],
                    'total_messages': 0,  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ë–î
                    'changes_detected': changes_found['total_changes']
                }
                self.db.close_scan_session(session_id, stats)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            self.session_stats['errors'] += 1

        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {changes_found['total_changes']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return changes_found

    async def parse_all_chats(self, force_full_scan: bool = False) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

        Args:
            force_full_scan: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        if self.account_restricted:
            print("üö´ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - –∞–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
            return {'error': 'Account restricted', 'session_statistics': self.get_session_statistics()}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.update_status(operation='parsing_all_chats')

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        session_id = None
        if self.db:
            session_id = self.db.create_scan_session()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats = await self.get_chats_list()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.update_status(progress_update={
            'total_chats': len(chats),
            'processed_chats': 0
        })

        all_data = {
            'timestamp': datetime.now().isoformat(),
            'total_chats': len(chats),
            'chats': {},
            'session_id': session_id,
            'parsing_mode': 'full_scan' if force_full_scan else 'smart_cache'
        }

        total_messages = 0
        chats_parsed = 0
        chats_skipped = 0

        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        for i, chat in enumerate(chats, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            if self.check_interruption_requested():
                print(f"\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ {i-1}/{len(chats)} —á–∞—Ç–æ–≤")
                break

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            self.update_status(
                chat_info={
                    'id': chat['id'],
                    'name': chat['name'],
                    'type': chat['type']
                },
                progress_update={
                    'processed_chats': i - 1,
                    'current_chat_number': i,
                    'parsing_phase': f'–ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {i}/{len(chats)}: {chat["name"]}'
                }
            )

            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(chats)} - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º '{chat['name']}'")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if i > 1 and self.current_status['progress']['estimated_time_remaining']:
                remaining_time = self.current_status['progress']['estimated_time_remaining']
                print(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_time/60:.1f} –º–∏–Ω—É—Ç")

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å —á–∞—Ç
                if not force_full_scan and self._should_skip_chat(chat):
                    all_data['chats'][str(chat['id'])] = {
                        'info': chat,
                        'messages': [],
                        'total_messages': 0,
                        'status': 'skipped - already cached'
                    }
                    chats_skipped += 1
                    continue

                messages = await self.parse_chat_messages(
                    chat['id'],
                    session_id=session_id,
                    force_full_scan=force_full_scan
                )

                all_data['chats'][str(chat['id'])] = {
                    'info': chat,
                    'messages': messages,
                    'total_messages': len(messages),
                    'status': 'parsed'
                }
                total_messages += len(messages)
                chats_parsed += 1

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
                delay = self.rate_limits.get('delay_between_chats', 2)
                print(f"‚è∏Ô∏è –ñ–¥–µ–º {delay}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —á–∞—Ç–æ–º...")
                await asyncio.sleep(delay)

            except FloodWaitError as e:
                print(f"üö´ FloodWait –¥–ª—è —á–∞—Ç–∞ '{chat['name']}': {e.seconds}s")
                all_data['chats'][str(chat['id'])] = {
                    'info': chat,
                    'error': f'FloodWait: {e.seconds}s',
                    'messages': [],
                    'total_messages': 0,
                    'status': 'flood_wait_error'
                }

                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if e.seconds > self.rate_limits.get('max_flood_wait', 300):
                    print(f"üö´ –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ")
                    break

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Ç–∞ '{chat['name']}': {e}")
                all_data['chats'][str(chat['id'])] = {
                    'info': chat,
                    'error': str(e),
                    'messages': [],
                    'total_messages': 0,
                    'status': 'error'
                }
                self.session_stats['errors'] += 1

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
        all_data['parsing_statistics'] = {
            'chats_parsed': chats_parsed,
            'chats_skipped': chats_skipped,
            'total_messages': total_messages,
            'session_statistics': self.get_session_statistics()
        }

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        if self.db and session_id:
            stats = {
                'total_chats': chats_parsed,
                'total_messages': total_messages,
                'changes_detected': 0  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ë–î
            }
            self.db.close_scan_session(session_id, stats)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_summary = self.db.get_changes_summary()
            all_data['changes_summary'] = changes_summary

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            all_data['database_statistics'] = self.db.get_parsing_statistics()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        self.update_status(operation='idle')

        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {chats_parsed}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —á–∞—Ç–æ–≤: {chats_skipped}")
        print(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")

        return all_data

    async def _save_user_info(self, user):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not isinstance(user, User) or not self.db:
            return

        import sqlite3
        with sqlite3.connect(self.db.db_path) as conn:
            conn.execute('''
                INSERT OR IGNORE INTO users (id, username, first_name, last_name, phone)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user.id,
                getattr(user, 'username', None),
                getattr(user, 'first_name', None),
                getattr(user, 'last_name', None),
                getattr(user, 'phone', None)
            ))

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.monitor and self.monitor.is_running:
            self.monitor.stop_monitoring()
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
        if self.client:
            await self.client.disconnect()
            print("üëã –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Telegram")

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        stats = self.get_session_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['duration_seconds']:.1f}s")
        print(f"üì° –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    
    async def start_realtime_monitor(self, chat_ids: Optional[List[int]] = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.monitor:
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–∫–ª—é—á–∏—Ç–µ ENABLE_REALTIME_MONITOR –≤ config.py")
            return False
            
        try:
            await self.monitor.start_monitoring(chat_ids)
            print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(chat_ids) if chat_ids else '–≤—Å–µ—Ö'} —á–∞—Ç–æ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def stop_realtime_monitor(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.monitor and self.monitor.is_running:
            self.monitor.stop_monitoring()
            print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        return False