"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""
import json
import csv
import os
import pandas as pd
from datetime import datetime
from typing import Dict, Any, List
import config
from json_utils import safe_json_dumps

class DataExporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(config.OUTPUT_DIR):
            os.makedirs(config.OUTPUT_DIR)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {config.OUTPUT_DIR}")
    
    def export_to_json(self, data: Dict[str, Any], filename: str = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_export_{timestamp}.json"
        
        filepath = os.path.join(config.OUTPUT_DIR, filename)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON: {filename}")
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(safe_json_dumps(data))
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def export_to_csv(self, data: Dict[str, Any], filename: str = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ)
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_messages_{timestamp}.csv"
        
        filepath = os.path.join(config.OUTPUT_DIR, filename)
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª: {filename}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_messages = []
        for chat_id, chat_data in data['chats'].items():
            if 'messages' in chat_data:
                for message in chat_data['messages']:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    message_with_chat = message.copy()
                    message_with_chat['chat_name'] = chat_data['info']['name']
                    message_with_chat['chat_type'] = chat_data['info']['type']
                    all_messages.append(message_with_chat)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        if all_messages:
            df = pd.DataFrame(all_messages)
            df.to_csv(filepath, index=False, encoding='utf-8')
            print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath} ({len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV")
        
        return filepath
    
    def export_chat_summary(self, data: Dict[str, Any], filename: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —á–∞—Ç–∞–º
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"chats_summary_{timestamp}.csv"
        
        filepath = os.path.join(config.OUTPUT_DIR, filename)
        
        print(f"üìà –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —á–∞—Ç–∞–º: {filename}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = []
        for chat_id, chat_data in data['chats'].items():
            summary_row = {
                'chat_id': chat_id,
                'chat_name': chat_data['info']['name'],
                'chat_type': chat_data['info']['type'],
                'total_messages': chat_data.get('total_messages', 0),
                'unread_count': chat_data['info'].get('unread_count', 0),
                'has_error': 'error' in chat_data
            }
            summary.append(summary_row)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        if summary:
            df = pd.DataFrame(summary)
            df = df.sort_values('total_messages', ascending=False)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
            df.to_csv(filepath, index=False, encoding='utf-8')
            print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        
        return filepath
    
    def export_all_formats(self, data: Dict[str, Any]) -> Dict[str, str]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        """
        print("üéØ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã...")
        
        exported_files = {}
        
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        if config.EXPORT_FORMATS.get('json', False):
            exported_files['json'] = self.export_to_json(data)
        
        # CSV —ç–∫—Å–ø–æ—Ä—Ç
        if config.EXPORT_FORMATS.get('csv', False):
            exported_files['csv_messages'] = self.export_to_csv(data)
            exported_files['csv_summary'] = self.export_chat_summary(data)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_export_summary(data, exported_files)
        
        return exported_files
    
    def print_export_summary(self, data: Dict[str, Any], exported_files: Dict[str, str]):
        """
        –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É
        """
        print("\n" + "="*50)
        print("üìä –°–í–û–î–ö–ê –ü–û –≠–ö–°–ü–û–†–¢–£")
        print("="*50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_chats = data.get('total_chats', 0)
        total_messages = sum([
            chat_data.get('total_messages', 0) 
            for chat_data in data['chats'].values()
        ])
        
        print(f"üìÅ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}")
        print(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
        print(f"üìÖ –í—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        # –§–∞–π–ª—ã
        print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_type, filepath in exported_files.items():
            print(f"   {file_type}: {filepath}")
        
        print("\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        print("="*50)